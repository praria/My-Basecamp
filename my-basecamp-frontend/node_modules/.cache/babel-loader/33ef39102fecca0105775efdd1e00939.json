{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { createProject, updateProject, getProjects, getProjectById, deleteProject } from '../../services/api';\n// import { Container, Typography, Button, TextField, List, ListItem, ListItemText, IconButton } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n\n// const ProjectManagement = () => {\n//   const [projects, setProjects] = useState([]);\n//   const [newProject, setNewProject] = useState({ name: '', description: '' });\n//   const [editProject, setEditProject] = useState(null);\n\n//   useEffect(() => {\n//     loadProjects();\n//   }, []);\n\n//   const loadProjects = async () => {\n//     try {\n//       const response = await getProjects();\n//       setProjects(response.data);\n//     } catch (error) {\n//       console.error('Error loading projects', error);\n//     }\n//   };\n\n//   const handleCreateProject = async () => {\n//     try {\n//       await createProject(newProject.name, newProject.description);\n//       loadProjects();\n//       setNewProject({ name: '', description: '' });\n//     } catch (error) {\n//       console.error('Error creating project', error);\n//     }\n//   };\n\n//   const handleUpdateProject = async () => {\n//     try {\n//       await updateProject(editProject.id, editProject.name, editProject.description);\n//       loadProjects();\n//       setEditProject(null);\n//     } catch (error) {\n//       console.error('Error updating project', error);\n//     }\n//   };\n\n//   const handleDeleteProject = async (id) => {\n//     try {\n//       await deleteProject(id);\n//       loadProjects();\n//     } catch (error) {\n//       console.error('Error deleting project', error);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <Typography variant=\"h4\" gutterBottom>Project Management</Typography>\n//       <div>\n//         <TextField\n//           label=\"Project Name\"\n//           value={newProject.name}\n//           onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}\n//         />\n//         <TextField\n//           label=\"Project Description\"\n//           value={newProject.description}\n//           onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}\n//         />\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleCreateProject}>\n//           Create Project\n//         </Button>\n//       </div>\n//       {editProject && (\n//         <div>\n//           <TextField\n//             label=\"Edit Project Name\"\n//             value={editProject.name}\n//             onChange={(e) => setEditProject({ ...editProject, name: e.target.value })}\n//           />\n//           <TextField\n//             label=\"Edit Project Description\"\n//             value={editProject.description}\n//             onChange={(e) => setEditProject({ ...editProject, description: e.target.value })}\n//           />\n//           <Button variant=\"contained\" color=\"primary\" onClick={handleUpdateProject}>\n//             Update Project\n//           </Button>\n//         </div>\n//       )}\n//       <List>\n//         {projects.map((project) => (\n//           <ListItem key={project.id}>\n//             <ListItemText primary={project.name} secondary={project.description} />\n//             <IconButton edge=\"end\" aria-label=\"edit\" onClick={() => setEditProject(project)}>\n//               <EditIcon />\n//             </IconButton>\n//             <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => handleDeleteProject(project.id)}>\n//               <DeleteIcon />\n//             </IconButton>\n//           </ListItem>\n//         ))}\n//       </List>\n//     </Container>\n//   );\n// };\n\n// export default ProjectManagement;","map":{"version":3,"names":[],"sources":["/Users/prakash/Documents/mscs/My-Basecamp/my-basecamp-frontend/src/components/Admin/ProjectManagement.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { createProject, updateProject, getProjects, getProjectById, deleteProject } from '../../services/api';\n// import { Container, Typography, Button, TextField, List, ListItem, ListItemText, IconButton } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n\n// const ProjectManagement = () => {\n//   const [projects, setProjects] = useState([]);\n//   const [newProject, setNewProject] = useState({ name: '', description: '' });\n//   const [editProject, setEditProject] = useState(null);\n\n//   useEffect(() => {\n//     loadProjects();\n//   }, []);\n\n//   const loadProjects = async () => {\n//     try {\n//       const response = await getProjects();\n//       setProjects(response.data);\n//     } catch (error) {\n//       console.error('Error loading projects', error);\n//     }\n//   };\n\n//   const handleCreateProject = async () => {\n//     try {\n//       await createProject(newProject.name, newProject.description);\n//       loadProjects();\n//       setNewProject({ name: '', description: '' });\n//     } catch (error) {\n//       console.error('Error creating project', error);\n//     }\n//   };\n\n//   const handleUpdateProject = async () => {\n//     try {\n//       await updateProject(editProject.id, editProject.name, editProject.description);\n//       loadProjects();\n//       setEditProject(null);\n//     } catch (error) {\n//       console.error('Error updating project', error);\n//     }\n//   };\n\n//   const handleDeleteProject = async (id) => {\n//     try {\n//       await deleteProject(id);\n//       loadProjects();\n//     } catch (error) {\n//       console.error('Error deleting project', error);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <Typography variant=\"h4\" gutterBottom>Project Management</Typography>\n//       <div>\n//         <TextField\n//           label=\"Project Name\"\n//           value={newProject.name}\n//           onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}\n//         />\n//         <TextField\n//           label=\"Project Description\"\n//           value={newProject.description}\n//           onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}\n//         />\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleCreateProject}>\n//           Create Project\n//         </Button>\n//       </div>\n//       {editProject && (\n//         <div>\n//           <TextField\n//             label=\"Edit Project Name\"\n//             value={editProject.name}\n//             onChange={(e) => setEditProject({ ...editProject, name: e.target.value })}\n//           />\n//           <TextField\n//             label=\"Edit Project Description\"\n//             value={editProject.description}\n//             onChange={(e) => setEditProject({ ...editProject, description: e.target.value })}\n//           />\n//           <Button variant=\"contained\" color=\"primary\" onClick={handleUpdateProject}>\n//             Update Project\n//           </Button>\n//         </div>\n//       )}\n//       <List>\n//         {projects.map((project) => (\n//           <ListItem key={project.id}>\n//             <ListItemText primary={project.name} secondary={project.description} />\n//             <IconButton edge=\"end\" aria-label=\"edit\" onClick={() => setEditProject(project)}>\n//               <EditIcon />\n//             </IconButton>\n//             <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => handleDeleteProject(project.id)}>\n//               <DeleteIcon />\n//             </IconButton>\n//           </ListItem>\n//         ))}\n//       </List>\n//     </Container>\n//   );\n// };\n\n// export default ProjectManagement;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}