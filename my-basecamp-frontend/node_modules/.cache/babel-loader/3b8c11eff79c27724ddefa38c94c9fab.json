{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Container, Typography, Button, TextField, List, ListItem, ListItemText, IconButton, Select, MenuItem, FormControl, InputLabel, Box } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n// import { getAllUsers, getTeamMembersByProject, assignAdminPermission, revokeAdminPermission, createUser, updateUser, deleteUser, addTeamMember, removeTeamMember } from '../../services/api';\n\n// const UserManagement = () => {\n//   const [users, setUsers] = useState([]);\n//   const [newUser, setNewUser] = useState({ username: '', password: '', role: '' });\n//   const [editUser, setEditUser] = useState(null);\n//   const [projectId, setProjectId] = useState('');\n//   const [userId, setUserId] = useState('');\n//   const [teamMembers, setTeamMembers] = useState([]);\n\n//   const loadUsers = async () => {\n//     try {\n//       const usersData = await getAllUsers();\n//       setUsers(usersData);\n//     } catch (error) {\n//       console.error('Error loading users:', error);\n//     }\n//   };\n\n//   const loadTeamMembersByProject = async (projectId) => {\n//     try {\n//       const teamMembersData = await getTeamMembersByProject(projectId);\n//       setTeamMembers(teamMembersData);\n//     } catch (error) {\n//       console.error('Error loading team members:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     loadUsers();\n//   }, []);\n\n//   const handleCreateUser = async () => {\n//     try {\n//       await createUser(newUser.username, newUser.password, newUser.role);\n//       loadUsers();\n//       setNewUser({ username: '', password: '', role: '' });\n//     } catch (error) {\n//       console.error('Error creating user:', error);\n//     }\n//   };\n\n//   const handleUpdateUser = async () => {\n//     try {\n//       await updateUser(editUser.id, { role: editUser.role });\n//       loadUsers();\n//       setEditUser(null);\n//     } catch (error) {\n//       console.error('Error updating user:', error);\n//     }\n//   };\n\n//   const handleDeleteUser = async (userId) => {\n//     try {\n//       await deleteUser(userId);\n//       loadUsers();\n//     } catch (error) {\n//       console.error('Error deleting user:', error);\n//     }\n//   };\n\n//   const handleAssignAdmin = async (userId) => {\n//     try {\n//       await assignAdminPermission(userId);\n//       loadUsers();\n//     } catch (error) {\n//       console.error('Error assigning admin permission:', error);\n//     }\n//   };\n\n//   const handleRevokeAdmin = async (userId) => {\n//     try {\n//       await revokeAdminPermission(userId);\n//       loadUsers();\n//     } catch (error) {\n//       console.error('Error revoking admin permission:', error);\n//     }\n//   };\n\n//   const handleAddTeamMember = async () => {\n//     try {\n//       await addTeamMember(projectId, userId);\n//       setProjectId('');\n//       setUserId('');\n//       loadTeamMembersByProject(projectId);\n//     } catch (error) {\n//       console.error('Error adding team member:', error);\n//     }\n//   };\n\n//   const handleRemoveTeamMember = async () => {\n//     try {\n//       await removeTeamMember(projectId, userId);\n//       setProjectId('');\n//       setUserId('');\n//       loadTeamMembersByProject(projectId);\n//     } catch (error) {\n//       console.error('Error removing team member:', error);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <Typography variant=\"h4\" gutterBottom>User Management</Typography>\n//       <Box my={2}>\n//         <TextField\n//           label=\"Username\"\n//           value={newUser.username}\n//           onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}\n//           fullWidth\n//           margin=\"normal\"\n//         />\n//         <TextField\n//           label=\"Password\"\n//           type=\"password\"\n//           value={newUser.password}\n//           onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}\n//           fullWidth\n//           margin=\"normal\"\n//         />\n//         <FormControl fullWidth margin=\"normal\">\n//           <InputLabel>Role</InputLabel>\n//           <Select\n//             value={newUser.role}\n//             onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}\n//           >\n//             <MenuItem value=\"admin\">Admin</MenuItem>\n//             <MenuItem value=\"project_manager\">Project Manager</MenuItem>\n//             <MenuItem value=\"regular_user\">Regular User</MenuItem>\n//           </Select>\n//         </FormControl>\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleCreateUser} fullWidth>\n//           Create User\n//         </Button>\n//       </Box>\n\n//       {editUser && (\n//         <Box my={2}>\n//           <Typography variant=\"h6\">Edit User</Typography>\n//           <TextField\n//             label=\"Role\"\n//             value={editUser.role}\n//             onChange={(e) => setEditUser({ ...editUser, role: e.target.value })}\n//             fullWidth\n//             margin=\"normal\"\n//           />\n//           <Button variant=\"contained\" color=\"primary\" onClick={handleUpdateUser} fullWidth>\n//             Update User\n//           </Button>\n//         </Box>\n//       )}\n\n//       <Typography variant=\"h6\" gutterBottom>Users List</Typography>\n//       <List>\n//         {users.map((user) => (\n//           <ListItem key={user.id}>\n//             <ListItemText\n//               primary={`${user.username} (Role: ${user.role})`}\n//               secondary={`ID: ${user.id}`}\n//             />\n//             <IconButton edge=\"end\" aria-label=\"edit\" onClick={() => setEditUser(user)}>\n//               <EditIcon />\n//             </IconButton>\n//             <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => handleDeleteUser(user.id)}>\n//               <DeleteIcon />\n//             </IconButton>\n//             <Button onClick={() => handleAssignAdmin(user.id)} disabled={user.role === 'admin'}>\n//               Assign Admin\n//             </Button>\n//             <Button onClick={() => handleRevokeAdmin(user.id)} disabled={user.role !== 'admin'}>\n//               Revoke Admin\n//             </Button>\n//           </ListItem>\n//         ))}\n//       </List>\n\n//       <Box my={2}>\n//         <Typography variant=\"h6\">Manage Team Members</Typography>\n//         <TextField\n//           label=\"Project ID\"\n//           value={projectId}\n//           onChange={(e) => setProjectId(e.target.value)}\n//           fullWidth\n//           margin=\"normal\"\n//         />\n//         <TextField\n//           label=\"User ID\"\n//           value={userId}\n//           onChange={(e) => setUserId(e.target.value)}\n//           fullWidth\n//           margin=\"normal\"\n//         />\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleAddTeamMember} fullWidth>\n//           Add Team Member\n//         </Button>\n//         <Button variant=\"contained\" color=\"secondary\" onClick={handleRemoveTeamMember} fullWidth>\n//           Remove Team Member\n//         </Button>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default UserManagement;","map":{"version":3,"names":[],"sources":["/Users/prakash/Documents/mscs/My-Basecamp/my-basecamp-frontend/src/components/Admin/UserManagement.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Container, Typography, Button, TextField, List, ListItem, ListItemText, IconButton, Select, MenuItem, FormControl, InputLabel, Box } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n// import { getAllUsers, getTeamMembersByProject, assignAdminPermission, revokeAdminPermission, createUser, updateUser, deleteUser, addTeamMember, removeTeamMember } from '../../services/api';\n\n// const UserManagement = () => {\n//   const [users, setUsers] = useState([]);\n//   const [newUser, setNewUser] = useState({ username: '', password: '', role: '' });\n//   const [editUser, setEditUser] = useState(null);\n//   const [projectId, setProjectId] = useState('');\n//   const [userId, setUserId] = useState('');\n//   const [teamMembers, setTeamMembers] = useState([]);\n\n//   const loadUsers = async () => {\n//     try {\n//       const usersData = await getAllUsers();\n//       setUsers(usersData);\n//     } catch (error) {\n//       console.error('Error loading users:', error);\n//     }\n//   };\n\n//   const loadTeamMembersByProject = async (projectId) => {\n//     try {\n//       const teamMembersData = await getTeamMembersByProject(projectId);\n//       setTeamMembers(teamMembersData);\n//     } catch (error) {\n//       console.error('Error loading team members:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     loadUsers();\n//   }, []);\n\n//   const handleCreateUser = async () => {\n//     try {\n//       await createUser(newUser.username, newUser.password, newUser.role);\n//       loadUsers();\n//       setNewUser({ username: '', password: '', role: '' });\n//     } catch (error) {\n//       console.error('Error creating user:', error);\n//     }\n//   };\n\n//   const handleUpdateUser = async () => {\n//     try {\n//       await updateUser(editUser.id, { role: editUser.role });\n//       loadUsers();\n//       setEditUser(null);\n//     } catch (error) {\n//       console.error('Error updating user:', error);\n//     }\n//   };\n\n//   const handleDeleteUser = async (userId) => {\n//     try {\n//       await deleteUser(userId);\n//       loadUsers();\n//     } catch (error) {\n//       console.error('Error deleting user:', error);\n//     }\n//   };\n\n//   const handleAssignAdmin = async (userId) => {\n//     try {\n//       await assignAdminPermission(userId);\n//       loadUsers();\n//     } catch (error) {\n//       console.error('Error assigning admin permission:', error);\n//     }\n//   };\n\n//   const handleRevokeAdmin = async (userId) => {\n//     try {\n//       await revokeAdminPermission(userId);\n//       loadUsers();\n//     } catch (error) {\n//       console.error('Error revoking admin permission:', error);\n//     }\n//   };\n\n//   const handleAddTeamMember = async () => {\n//     try {\n//       await addTeamMember(projectId, userId);\n//       setProjectId('');\n//       setUserId('');\n//       loadTeamMembersByProject(projectId);\n//     } catch (error) {\n//       console.error('Error adding team member:', error);\n//     }\n//   };\n\n//   const handleRemoveTeamMember = async () => {\n//     try {\n//       await removeTeamMember(projectId, userId);\n//       setProjectId('');\n//       setUserId('');\n//       loadTeamMembersByProject(projectId);\n//     } catch (error) {\n//       console.error('Error removing team member:', error);\n//     }\n//   };\n\n//   return (\n//     <Container>\n//       <Typography variant=\"h4\" gutterBottom>User Management</Typography>\n//       <Box my={2}>\n//         <TextField\n//           label=\"Username\"\n//           value={newUser.username}\n//           onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}\n//           fullWidth\n//           margin=\"normal\"\n//         />\n//         <TextField\n//           label=\"Password\"\n//           type=\"password\"\n//           value={newUser.password}\n//           onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}\n//           fullWidth\n//           margin=\"normal\"\n//         />\n//         <FormControl fullWidth margin=\"normal\">\n//           <InputLabel>Role</InputLabel>\n//           <Select\n//             value={newUser.role}\n//             onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}\n//           >\n//             <MenuItem value=\"admin\">Admin</MenuItem>\n//             <MenuItem value=\"project_manager\">Project Manager</MenuItem>\n//             <MenuItem value=\"regular_user\">Regular User</MenuItem>\n//           </Select>\n//         </FormControl>\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleCreateUser} fullWidth>\n//           Create User\n//         </Button>\n//       </Box>\n\n//       {editUser && (\n//         <Box my={2}>\n//           <Typography variant=\"h6\">Edit User</Typography>\n//           <TextField\n//             label=\"Role\"\n//             value={editUser.role}\n//             onChange={(e) => setEditUser({ ...editUser, role: e.target.value })}\n//             fullWidth\n//             margin=\"normal\"\n//           />\n//           <Button variant=\"contained\" color=\"primary\" onClick={handleUpdateUser} fullWidth>\n//             Update User\n//           </Button>\n//         </Box>\n//       )}\n\n//       <Typography variant=\"h6\" gutterBottom>Users List</Typography>\n//       <List>\n//         {users.map((user) => (\n//           <ListItem key={user.id}>\n//             <ListItemText\n//               primary={`${user.username} (Role: ${user.role})`}\n//               secondary={`ID: ${user.id}`}\n//             />\n//             <IconButton edge=\"end\" aria-label=\"edit\" onClick={() => setEditUser(user)}>\n//               <EditIcon />\n//             </IconButton>\n//             <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => handleDeleteUser(user.id)}>\n//               <DeleteIcon />\n//             </IconButton>\n//             <Button onClick={() => handleAssignAdmin(user.id)} disabled={user.role === 'admin'}>\n//               Assign Admin\n//             </Button>\n//             <Button onClick={() => handleRevokeAdmin(user.id)} disabled={user.role !== 'admin'}>\n//               Revoke Admin\n//             </Button>\n//           </ListItem>\n//         ))}\n//       </List>\n\n//       <Box my={2}>\n//         <Typography variant=\"h6\">Manage Team Members</Typography>\n//         <TextField\n//           label=\"Project ID\"\n//           value={projectId}\n//           onChange={(e) => setProjectId(e.target.value)}\n//           fullWidth\n//           margin=\"normal\"\n//         />\n//         <TextField\n//           label=\"User ID\"\n//           value={userId}\n//           onChange={(e) => setUserId(e.target.value)}\n//           fullWidth\n//           margin=\"normal\"\n//         />\n//         <Button variant=\"contained\" color=\"primary\" onClick={handleAddTeamMember} fullWidth>\n//           Add Team Member\n//         </Button>\n//         <Button variant=\"contained\" color=\"secondary\" onClick={handleRemoveTeamMember} fullWidth>\n//           Remove Team Member\n//         </Button>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default UserManagement;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}