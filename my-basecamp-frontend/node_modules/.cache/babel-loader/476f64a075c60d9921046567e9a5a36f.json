{"ast":null,"code":"// import React, { useState, useEffect, useCallback } from 'react';\n// import {\n//   Container,\n//   Typography,\n//   Button,\n//   List,\n//   ListItem,\n//   ListItemText,\n//   IconButton,\n//   Box,\n//   Paper,\n//   Grid,\n//   CircularProgress,\n// } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import { getFiles, uploadFile, downloadFile, deleteFile } from '../../services/api.js';\n// import { useParams } from 'react-router-dom';\n\n// const FileManagement = () => {\n//   const { projectId } = useParams();\n//   const [files, setFiles] = useState([]);\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   const loadFiles = useCallback(async () => {\n//     setLoading(true);\n//     try {\n//       const allFiles = await getFiles();\n//       const projectFiles = allFiles.filter(file => file.projectId === parseInt(projectId, 10));\n//       setFiles(projectFiles);\n//     } catch (error) {\n//       console.error('Error loading files:', error);\n//     }\n//     setLoading(false);\n//   }, [projectId]);\n\n//   useEffect(() => {\n//     loadFiles();\n//   }, [loadFiles]);\n\n//   const handleFileUpload = async () => {\n//     if (!selectedFile) return;\n//     setLoading(true);\n//     try {\n//       const newFile = await uploadFile(projectId, selectedFile);\n//       setFiles([...files, newFile]);\n//       setSelectedFile(null);\n//     } catch (error) {\n//       console.error('Error uploading file:', error);\n//     }\n//     setLoading(false);\n//   };\n\n//   const handleFileDownload = async (fileId, filename) => {\n//     try {\n//       const file = await downloadFile(fileId);\n//       const url = window.URL.createObjectURL(new Blob([file]));\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n//       document.body.appendChild(link);\n//       link.click();\n//     } catch (error) {\n//       console.error('Error downloading file:', error);\n//     }\n//   };\n\n//   const handleFileDelete = async (fileId) => {\n//     setLoading(true);\n//     try {\n//       await deleteFile(fileId);\n//       setFiles(files.filter(file => file.id !== fileId));\n//     } catch (error) {\n//       console.error('Error deleting file:', error);\n//     }\n//     setLoading(false);\n//   };\n\n//   return (\n//     <Container>\n//       <Typography variant=\"h4\" gutterBottom>File Management</Typography>\n//       <Paper elevation={3} style={{ padding: '16px', marginBottom: '16px' }}>\n//         <Typography variant=\"h6\">Upload New File</Typography>\n//         <Box my={2}>\n//           <input type=\"file\" onChange={(e) => setSelectedFile(e.target.files[0])} />\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             onClick={handleFileUpload}\n//             disabled={!selectedFile || loading}\n//             style={{ marginLeft: '8px' }}\n//           >\n//             {loading ? <CircularProgress size={24} /> : 'Upload File'}\n//           </Button>\n//         </Box>\n//       </Paper>\n//       <Paper elevation={3} style={{ padding: '16px' }}>\n//         <Typography variant=\"h6\">Project Files</Typography>\n//         {loading ? (\n//           <CircularProgress />\n//         ) : (\n//           <List>\n//             {files.map((file) => (\n//               <ListItem key={file.id} divider>\n//                 <Grid container alignItems=\"center\">\n//                   <Grid item xs={6}>\n//                     <ListItemText primary={file.filename} />\n//                   </Grid>\n//                   <Grid item xs={3}>\n//                     <Button\n//                       variant=\"contained\"\n//                       color=\"secondary\"\n//                       onClick={() => handleFileDownload(file.id, file.filename)}\n//                     >\n//                       Download\n//                     </Button>\n//                   </Grid>\n//                   <Grid item xs={3}>\n//                     <IconButton\n//                       edge=\"end\"\n//                       aria-label=\"delete\"\n//                       onClick={() => handleFileDelete(file.id)}\n//                       disabled={loading}\n//                     >\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </Grid>\n//                 </Grid>\n//               </ListItem>\n//             ))}\n//           </List>\n//         )}\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// export default FileManagement;","map":{"version":3,"names":[],"sources":["/Users/prakash/Documents/mscs/My-Basecamp/my-basecamp-frontend/src/components/Admin/FileManagement.js"],"sourcesContent":["// import React, { useState, useEffect, useCallback } from 'react';\n// import {\n//   Container,\n//   Typography,\n//   Button,\n//   List,\n//   ListItem,\n//   ListItemText,\n//   IconButton,\n//   Box,\n//   Paper,\n//   Grid,\n//   CircularProgress,\n// } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import { getFiles, uploadFile, downloadFile, deleteFile } from '../../services/api.js';\n// import { useParams } from 'react-router-dom';\n\n// const FileManagement = () => {\n//   const { projectId } = useParams();\n//   const [files, setFiles] = useState([]);\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   const loadFiles = useCallback(async () => {\n//     setLoading(true);\n//     try {\n//       const allFiles = await getFiles();\n//       const projectFiles = allFiles.filter(file => file.projectId === parseInt(projectId, 10));\n//       setFiles(projectFiles);\n//     } catch (error) {\n//       console.error('Error loading files:', error);\n//     }\n//     setLoading(false);\n//   }, [projectId]);\n\n//   useEffect(() => {\n//     loadFiles();\n//   }, [loadFiles]);\n\n//   const handleFileUpload = async () => {\n//     if (!selectedFile) return;\n//     setLoading(true);\n//     try {\n//       const newFile = await uploadFile(projectId, selectedFile);\n//       setFiles([...files, newFile]);\n//       setSelectedFile(null);\n//     } catch (error) {\n//       console.error('Error uploading file:', error);\n//     }\n//     setLoading(false);\n//   };\n\n//   const handleFileDownload = async (fileId, filename) => {\n//     try {\n//       const file = await downloadFile(fileId);\n//       const url = window.URL.createObjectURL(new Blob([file]));\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n//       document.body.appendChild(link);\n//       link.click();\n//     } catch (error) {\n//       console.error('Error downloading file:', error);\n//     }\n//   };\n\n//   const handleFileDelete = async (fileId) => {\n//     setLoading(true);\n//     try {\n//       await deleteFile(fileId);\n//       setFiles(files.filter(file => file.id !== fileId));\n//     } catch (error) {\n//       console.error('Error deleting file:', error);\n//     }\n//     setLoading(false);\n//   };\n\n//   return (\n//     <Container>\n//       <Typography variant=\"h4\" gutterBottom>File Management</Typography>\n//       <Paper elevation={3} style={{ padding: '16px', marginBottom: '16px' }}>\n//         <Typography variant=\"h6\">Upload New File</Typography>\n//         <Box my={2}>\n//           <input type=\"file\" onChange={(e) => setSelectedFile(e.target.files[0])} />\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             onClick={handleFileUpload}\n//             disabled={!selectedFile || loading}\n//             style={{ marginLeft: '8px' }}\n//           >\n//             {loading ? <CircularProgress size={24} /> : 'Upload File'}\n//           </Button>\n//         </Box>\n//       </Paper>\n//       <Paper elevation={3} style={{ padding: '16px' }}>\n//         <Typography variant=\"h6\">Project Files</Typography>\n//         {loading ? (\n//           <CircularProgress />\n//         ) : (\n//           <List>\n//             {files.map((file) => (\n//               <ListItem key={file.id} divider>\n//                 <Grid container alignItems=\"center\">\n//                   <Grid item xs={6}>\n//                     <ListItemText primary={file.filename} />\n//                   </Grid>\n//                   <Grid item xs={3}>\n//                     <Button\n//                       variant=\"contained\"\n//                       color=\"secondary\"\n//                       onClick={() => handleFileDownload(file.id, file.filename)}\n//                     >\n//                       Download\n//                     </Button>\n//                   </Grid>\n//                   <Grid item xs={3}>\n//                     <IconButton\n//                       edge=\"end\"\n//                       aria-label=\"delete\"\n//                       onClick={() => handleFileDelete(file.id)}\n//                       disabled={loading}\n//                     >\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </Grid>\n//                 </Grid>\n//               </ListItem>\n//             ))}\n//           </List>\n//         )}\n//       </Paper>\n//     </Container>\n//   );\n// };\n\n// export default FileManagement;\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}